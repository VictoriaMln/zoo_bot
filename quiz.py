import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import config
from urllib.parse import quote

logger = logging.getLogger(__name__)

# ID —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
STICKERS = {
    "–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": "CAACAgIAAxkBAAICIWgKDryuMVR9TtmPmaVWcCHBGIklAAKxdwAC5F1ISO5lYgIOGAtJNgQ",
    "–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": "CAACAgIAAxkBAAICGWgKDm1oJJMM_Wex8Nd6htaH7SduAALRawAC4rVRSMV3wTQoE8tCNgQ",
    "–í–∏–∫—É–Ω—å—è": "CAACAgIAAxkBAAICG2gKDovjWafo36pYL9ZKDJ-tP7cxAAIoeAACTctISH3ASkGKw_5mNgQ",
    "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": "CAACAgIAAxkBAAICHWgKDp5Xardl-dr-kXEVUTMfRvlXAAJTdQACzDpQSIBSIgvmV02GNgQ",
    "–ê–ª—å–ø–∞–∫–∞": "CAACAgIAAxkBAAICI2gKDslnvRUtJnkhGPabtonzdHOtAAKGeAACKeNQSOO87I5S1Yu0NgQ",
    "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": "CAACAgIAAxkBAAICF2gKDZ2KR9v_IigtO5rvFScsH5aIAAKYeAACVDxJSAABNsEPDcktAAE2BA",
    "–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": "CAACAgIAAxkBAAICH2gKDq3yEqZTf--J4ur5CtuBuFGsAAItawACsIVQSDkOT9iro_4GNgQ"
}

# –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
BOT_LINK = f"https://t.me/{config.BOT_USERNAME}"

# –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
QUESTIONS = [
    {
        "question": "–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–ø—É—Å–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç...",
        "options": [
            {"text": "–£ –≤–æ–¥–æ—ë–º–æ–≤: –ø–ª–∞–≤–∞–Ω—å–µ, –Ω—ã—Ä—è–Ω–∏–µ, –±—Ä—ã–∑–≥–∏!", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 2, "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 1}},
            {"text": "–í –±–µ—Å–∫—Ä–∞–π–Ω–∏—Ö —Ä–∞–≤–Ω–∏–Ω–∞—Ö —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç", "scores": {"–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 2, "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 1}},
            {"text": "–°—Ä–µ–¥–∏ –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω –∏ —á–∏—Å—Ç–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞", "scores": {"–í–∏–∫—É–Ω—å—è": 2, "–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 1}},
            {"text": "–ù–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2, "–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 1}}
        ]
    },
    {
        "question": "–¢–≤–æ—ë —Ö–æ–±–±–∏ ‚Äî —ç—Ç–æ...",
        "options": [
            {"text": "–ò—Å–∫–∞—Ç—å —É—é—Ç–Ω—ã–µ –ø–æ—Ç–∞—ë–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 2, "–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 1}},
            {"text": "–û–±–æ–∑–Ω–∞—á–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã —Å–≤–æ–∏—Ö –≤–ª–∞–¥–µ–Ω–∏–π", "scores": {"–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 2, "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 1}},
            {"text": "–ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Å–æ—á–Ω–æ–π –≥–æ—Ä–Ω–æ–π —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", "scores": {"–í–∏–∫—É–Ω—å—è": 2, "–ê–ª—å–ø–∞–∫–∞": 1}},
            {"text": "–†–∞–∑–º–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –ª—é–±–∏–º—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2, "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 1}}
        ]
    },
    {
        "question": "–¢–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
        "options": [
            {"text": "–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è –æ—Ö–æ—Ç–∞ –∑–∞ —Å–≤–µ–∂–µ–π –¥–æ–±—ã—á–µ–π", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 2, "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 1}},
            {"text": "–°–ª–∞–¥–∫–∏–π —Ñ—É—Ä—à–µ—Ç –∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–ª–æ–¥–æ–≤", "scores": {"–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 2, "–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 1}},
            {"text": "–ù–µ–∂–Ω–æ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "scores": {"–ê–ª—å–ø–∞–∫–∞": 2, "–í–∏–∫—É–Ω—å—è": 1}},
            {"text": "–í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∏—Ä –Ω–∞ –≤–µ—Å—å –º–∏—Ä", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2, "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 1}}
        ]
    },
    {
        "question": "–¢–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ ‚Äî —ç—Ç–æ...",
        "options": [
            {"text": "–í–æ–¥–Ω–∞—è —Å—Ç–∏—Ö–∏—è: –∫–∞–∫ —Ä—ã–±–∞ –≤ –≤–æ–¥–µ!", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 2, "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 1}},
            {"text": "–†–∞–¥–∞—Ä –¥–ª—è –º–µ–ª—å—á–∞–π—à–∏—Ö –∑–≤—É–∫–æ–≤", "scores": {"–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 2, "–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 1}},
            {"text": "–ò—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2, "–í–∏–∫—É–Ω—å—è": 1}},
            {"text": "–ù–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥", "scores": {"–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 2, "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 1}}
        ]
    },
    {
        "question": "–ó–≤—É–∫, –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞—é—â–∏–π —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
        "options": [
            {"text": "–ö–æ—à–∞—á—å–µ –º—É—Ä–ª—ã–∫–∞–Ω—å–µ —Å —à–∏–ø—è—â–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 2}},
            {"text": "–ë–∞—Å–æ–≤–∏—Ç–æ–µ —É—Ö–∞–Ω—å–µ –ª–µ—Å–Ω–æ–≥–æ —Å—Ç–æ—Ä–æ–∂–∞", "scores": {"–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 2}},
            {"text": "–ú–µ–ª–æ–¥–∏—á–Ω–æ–µ –ø–æ—Å–≤–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Ç—Ä—É", "scores": {"–í–∏–∫—É–Ω—å—è": 2, "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 1}},
            {"text": "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–º—Ñ–æ–Ω–∏—è –¥–∂—É–Ω–≥–ª–µ–π", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2}}
        ]
    },
    {
        "question": "–ö–∞–∫–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ç—ã –æ–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—à—å —É –¥—Ä—É–∑–µ–π?",
        "options": [
            {"text": "–û–ª–∏—Ü–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ç–µ–ø–ª–∞ –∏ —É—é—Ç–∞", "scores": {"–ê–ª—å–ø–∞–∫–∞": 2, "–í–∏–∫—É–Ω—å—è": 1}},
            {"text": "–•–æ–¥—è—á–∞—è —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —ç–∫–∑–æ—Ç–∏–∫–∏", "scores": {"–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 2}},
            {"text": "–°–∏–º–≤–æ–ª –Ω–µ—É—Ç–æ–º–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–Ω–∏–∫–∞", "scores": {"–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 2, "–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 1}},
            {"text": "–í–æ–ø–ª–æ—â–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2}}
        ]
    },
    {
        "question": "–ï—Å–ª–∏ –±—ã —Ç—ã —Å—Ç–∞–ª —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º, —Ç–≤–æ—è —Å–∏–ª–∞:",
        "options": [
            {"text": "–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –≤ –ª—é–±–æ–π —Å—Ä–µ–¥–µ", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 2}},
            {"text": "–û—Ä–ª–∏–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏", "scores": {"–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 1, "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 1}},
            {"text": "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –ª—é–±—ã–º —É—Å–ª–æ–≤–∏—è–º", "scores": {"–í–∏–∫—É–Ω—å—è": 2, "–ê–ª—å–ø–∞–∫–∞": 1}},
            {"text": "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å—Ç–∏—Ö–∏—è–º–∏ –ø—Ä–∏—Ä–æ–¥—ã", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 1, "–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 1}}
        ]
    },
    {
        "question": "–ß—Ç–æ —Ç–µ–±—è –∑–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π?",
        "options": [
            {"text": "–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–≥—Ä", "scores": {"–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 1, "–ì—Ä–∏–≤–∏—Å—Ç—ã–π –≤–æ–ª–∫": 2}},
            {"text": "–ë–æ–ª—Ç–æ–≤–Ω—è —Å —è—Ä–∫–∏–º –∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç–æ–º", "scores": {"–ë–æ–ª—å—à–æ–π —Ç—É–∫–∞–Ω": 2}},
            {"text": "–£—é—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞", "scores": {"–ê–ª—å–ø–∞–∫–∞": 2}},
            {"text": "–°–∏–ª–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–π", "scores": {"–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω": 2, "–ó–µ–±—Ä–∞ –ì—Ä–µ–≤–∏": 1}}
        ]
    }
]

def format_question(q_idx: int) -> (str, InlineKeyboardMarkup):
    q = QUESTIONS[q_idx]
    opts = "\n".join(f"{i+1}.{opt['text']}" for i, opt in enumerate(q["options"]))
    text = (
        f"–í–æ–ø—Ä–æ—Å {q_idx+1}/{len(QUESTIONS)}\n\n"
        f"{q['question']}\n\n"
        f"{opts}"
    )
    buttons = [
        [InlineKeyboardButton(f"{i + 1}", callback_data=f"{q_idx}:{i}")]
        for i in range(len(q["options"]))
    ]
    return text, InlineKeyboardMarkup(buttons)
async def safe_reply(message, text, reply_markup=None, parse_mode=None):
    try:
        await message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_top_animals(scores):
    if not scores:
        return []
    max_score = max(scores.values())
    return [animal for animal, score in scores.items() if score == max_score]

async def advance_question(update, context, q_idx: int):
    chat_id = context.user_data["quiz_chat_id"]
    msg_id = context.user_data["quiz_message_id"]

    if q_idx >= len(QUESTIONS):
        await send_result(chat_id, msg_id, context)
        return

    text, markup = format_question(q_idx)

    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=msg_id,
        text=text,
        reply_markup=markup
    )
    context.user_data["current_q"] = q_idx

async def process_answer(update, context):
    try:
        query = update.callback_query
        await query.answer()

        q_idx, a_idx = map(int, query.data.split(":"))
        opt = QUESTIONS[q_idx]["options"][a_idx]

        scores = context.user_data.setdefault('scores', {})
        for animal, pts in opt['scores'].items():
            scores[animal] = scores.get(animal, 0) + pts

        await advance_question(update, context, q_idx + 1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /start")

async def send_result(chat_id, msg_id, context):
    scores = context.user_data.get("scores", {})

    if not scores:
        result_animal = "‚Äî –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ‚Äî"
        result_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µüò™ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        sticker_id = None
    else:
        top_animals = get_top_animals(scores)
        result_animal = random.choice(top_animals)
        result_text = f"üéâ–¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ: *{result_animal}*!"
        sticker_id = STICKERS.get(result_animal)

    if sticker_id:
        await context.bot.send_sticker(chat_id=chat_id, sticker=sticker_id)

    raw = f"–ú–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ - {result_animal}! –ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë. "
    enc = quote(raw, safe='')
    enc_link = quote(config.BOT_LINK, safe='')

    share_buttons = [
        [InlineKeyboardButton(" Telegram", url=f"https://t.me/share/url?url={enc_link}&text={enc}")],
        [InlineKeyboardButton(" WhatsApp", url=f"https://api.whatsapp.com/send?text={enc}")],
        [InlineKeyboardButton(" VK", url=f"https://vk.com/share.php?url={enc_link}&title={enc}")],
        [InlineKeyboardButton(" Facebook", url=f"https://www.facebook.com/sharer/sharer.php?u={enc_link}&quote={enc}")],
    ]

    share_buttons += [
        [InlineKeyboardButton("‚ÅâÔ∏è–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data="program_info")],
        [InlineKeyboardButton("‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")],
        [InlineKeyboardButton("üîÑ–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="restart")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data="contact")]
    ]
    markup = InlineKeyboardMarkup(share_buttons)

    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=msg_id,
        text=result_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
