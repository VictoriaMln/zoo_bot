import config, logging, quiz
from quiz import format_question
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


START_KEYBOARD = ReplyKeyboardMarkup(
    [["‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        welcome_text = (
            "üêæ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!* ü¶Å\n"
            "–ù–∞–∂–º–∏ ‚ñ∂Ô∏è ¬´–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ."
        )
        await update.message.reply_text(welcome_text, reply_markup=START_KEYBOARD, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

async def start_quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º!",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    context.user_data["scores"] = {}
    context.user_data["current_q"] = 0

    text, markup = format_question(0)
    sent = await update.message.reply_text(text, reply_markup=markup)

    context.user_data["quiz_chat_id"] = sent.chat.id
    context.user_data["quiz_message_id"] = sent.message_id


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if query.data == "program_info":
            program_text = """
             üêæ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö</b> üêæ\n
    –°—Ç–∞–≤ –æ–ø–µ–∫—É–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—à–µ–º—É –∑–æ–æ–ø–∞—Ä–∫—É, –Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ. 
    üìà –ö 2050 –≥–æ–¥—É –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –¥–æ 10 000 –≤–∏–¥–æ–≤, –∏ –∫–∞–∂–¥—ã–π –æ–ø–µ–∫—É–Ω ‚Äî —ç—Ç–æ –≤–∫–ª–∞–¥ –≤ –∏—Ö –∑–∞—â–∏—Ç—É.
    –° 1864 –≥–æ–¥–∞ –Ω–∞—à–∏ –¥—Ä—É–∑—å—è-–æ–ø–µ–∫—É–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ <b>–ö–ª—É–± –¥—Ä—É–∑–µ–π –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞</b>. 
    –£—á–∞—Å—Ç–∏–µ –≤ –Ω—ë–º –¥–∞—ë—Ç:
      ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–ø–µ–∫—É–Ω–∞ üéüÔ∏è
      ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ –∂–∏–∑–Ω–∏ —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ üì∏
      ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è ü¶Å\n
      ‚úâÔ∏è –ù–∞—à–∞ –ø–æ—á—Ç–∞: zoo@moscowzoo.ru
      üåê –°–∞–π—Ç: https://moscowzoo.ru/about/guardianship
            """
            await query.message.edit_text(program_text, parse_mode="HTML")

        elif query.data == "restart":
            old_msg_id = context.user_data.get("quiz_message_id")
            if old_msg_id:
                try:
                    await context.bot.delete_message(
                        chat_id=query.message.chat.id,
                        message_id=old_msg_id
                    )
                except Exception:
                    pass
            context.user_data.clear()
            context.user_data["scores"] = {}
            context.user_data["current_q"] = 0

            text, markup = format_question(0)
            sent = await context.bot.send_message(
                chat_id=query.message.chat.id,
                text=text,
                reply_markup=markup
            )
            context.user_data["quiz_chat_id"] = sent.chat.id
            context.user_data["quiz_message_id"] = sent.message_id
        elif query.data == "feedback":
            context.user_data["awaiting_feedback"] = True
            await query.message.edit_text(
                "üìù –û—Å—Ç–∞–≤—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!"
            )
        elif query.data.startswith("0:") or query.data.split(":")[0].isdigit():
            await quiz.process_answer(update, context)
        elif query.data == "contact":
            user = update.effective_user
            scores = context.user_data.get("scores", {})
            result = max(scores, key=scores.get) if scores else "‚Äî –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ‚Äî"

            text_to_staff = (
                f"*–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã*\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{user.name}](tg://user?id={user.id})\n"
                f"ID: '{user.id}'\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: *{result}*"
            )
            await context.bot.send_message(
                chat_id=config.STAFF_CHAT_ID,
                text=text_to_staff,
                parse_mode="Markdown"
            )
            await query.message.edit_text(
            "‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–æ–æ–ø–∞—Ä–∫–∞. "
            "–û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n",
            parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await quiz.safe_reply(query.message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def main():
    try:
        app = ApplicationBuilder().token(config.BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.Regex(r"^‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É$"), start_quiz_button))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_handler))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()

    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_feedback"):
        feedback = update.message.text
        user = update.effective_user
        text_to_staff = (
            f"üí¨ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {user.full_name}* (ID {user.id}):\n\n"
            f"{feedback}"
        )

        await context.bot.send_message(
            chat_id=config.STAFF_CHAT_ID,
            text=text_to_staff,
            parse_mode="Markdown"
        )

        await update.message.reply_text("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        context.user_data["awaiting_feedback"] = False
    else:
        pass
if __name__ == '__main__':
    main()
